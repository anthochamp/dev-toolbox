name: Publish a container project

on:
  workflow_call:
    secrets:
      dhub-username:
        required: true
      dhub-password:
        required: true
      ghcr-username:
        required: true
      ghcr-password:
        required: true
    inputs:
      checkout-ref:
        description: The branch, tag or SHA to checkout. Defaults to the reference or SHA for that event.
        required: false
        type: string
      dockerfile-dir:
        description: Dockerfile directory
        required: false
        type: string
      dhub-readme-file:
        description: Path to the Docker Hub repository README file
        required: false
        type: string
      working-dir:
        description: Directory within the repository where the package is located
        required: false
        type: string
      version:
        description: Version
        required: true
        type: string
      alt-version:
        description: Alternate version
        required: false
        type: string
      alt-version-prefix:
        description: Prefix applied to alternate version
        required: false
        type: string
      container-image-name:
        description: Container image name
        required: true
        type: string
      build-platforms:
        description: "List of target platforms for build. Examples: linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6"
        required: false
        type: string

concurrency:
  group: ${{ inputs.container-image-name }}

jobs:
  check-version:
    if: ${{ inputs.version != '' }}
    runs-on: ubuntu-latest
    outputs:
      version-already-exists: ${{ steps.check-full-version.outputs.RESULT }}
    steps:
      - name: Log into Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.dhub-username }}
          password: ${{ secrets.dhub-password }}

      - name: Check if full version has already been pushed
        id: check-full-version
        run: |
          fullVersion=
          if [ -n "${{ inputs.alt-version }}" ]; then
            fullVersion="${{ inputs.version }}-${{ inputs.alt-version-prefix }}${{ inputs.alt-version }}"
          else
            fullVersion="${{ inputs.version }}"
          fi

          result=
          if docker manifest inspect $REPOSITORY:$fullVersion >/dev/null 2>/dev/null; then
            result="1"
          fi

          echo "RESULT=$result" >>$GITHUB_OUTPUT
        env:
          REPOSITORY: ${{ secrets.dhub-username }}/${{ inputs.container-image-name }}

  compose-container-tags:
    needs: check-version
    runs-on: ubuntu-latest
    outputs:
      has-container-tags-enabled: ${{ needs.check-version.outputs.version-already-exists != '1' || (inputs.checkout-ref == '' && github.ref_type != 'tag') }}
      container-tags: |
        type=raw,priority=1000,value=${{ inputs.version }}-${{ inputs.alt-version-prefix }}${{ inputs.alt-version }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && inputs.alt-version != '' }}
        type=raw,priority=900,value=${{ inputs.version }},enable=${{ needs.check-version.outputs.version-already-exists != '1' }}
        type=raw,priority=800,value=${{ steps.versions.outputs.MAJOR }}.${{ steps.versions.outputs.MINOR }}-${{ inputs.alt-version-prefix }}${{ inputs.alt-version }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && inputs.alt-version != '' && steps.versions.outputs.MINOR != '' }}
        type=raw,priority=700,value=${{ steps.versions.outputs.MAJOR }}.${{ steps.versions.outputs.MINOR }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && steps.versions.outputs.MINOR != '' }}
        type=raw,priority=600,value=${{ steps.versions.outputs.MAJOR }}-${{ inputs.alt-version-prefix }}${{ inputs.alt-version }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && inputs.alt-version != '' && steps.versions.outputs.MAJOR != inputs.version && steps.versions.outputs.MAJOR != '0' }}
        type=raw,priority=500,value=${{ steps.versions.outputs.MAJOR }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && steps.versions.outputs.MAJOR != inputs.version && steps.versions.outputs.MAJOR != '0' }}
        type=raw,priority=400,value=${{ inputs.alt-version-prefix }}${{ inputs.alt-version }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && inputs.alt-version != '' }}
        type=raw,priority=300,value=${{ inputs.alt-version-prefix }}${{ steps.versions.outputs.ALT_MAJOR }}.${{ steps.versions.outputs.ALT_MINOR }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && steps.versions.outputs.ALT_MINOR != '' }}
        type=raw,priority=200,value=${{ inputs.alt-version-prefix }}${{ steps.versions.outputs.ALT_MAJOR }},enable=${{ needs.check-version.outputs.version-already-exists != '1' && steps.versions.outputs.ALT_MAJOR != inputs.alt-version && steps.versions.outputs.ALT_MAJOR != '0' }}
        type=raw,priority=100,value=latest,enable=${{ needs.check-version.outputs.version-already-exists != '1' }}
        type=raw,priority=40,value=edge-${{ inputs.alt-version-prefix }}${{ inputs.alt-version }},enable=${{ inputs.checkout-ref == '' && github.ref_type != 'tag' && inputs.alt-version != '' }}
        type=raw,priority=30,value=edge-${{ inputs.alt-version-prefix }}${{ steps.versions.outputs.ALT_MAJOR }}.${{ steps.versions.outputs.ALT_MINOR }},enable=${{ inputs.checkout-ref == '' && github.ref_type != 'tag' && steps.versions.outputs.ALT_MINOR != '' }}
        type=raw,priority=20,value=edge-${{ inputs.alt-version-prefix }}${{ steps.versions.outputs.ALT_MAJOR }},enable=${{ inputs.checkout-ref == '' && github.ref_type != 'tag' && steps.versions.outputs.ALT_MAJOR != inputs.alt-version && steps.versions.outputs.ALT_MAJOR != '0' }}
        type=raw,priority=10,value=edge,enable=${{ inputs.checkout-ref == '' && github.ref_type != 'tag' }}
    steps:
      - name: Decompose versions
        id: versions
        run: |
          versionArray=(${VERSION//./ })
          echo "MAJOR=${versionArray[0]}" >>$GITHUB_OUTPUT
          echo "MINOR=${versionArray[1]}" >>$GITHUB_OUTPUT

          altVersionArray=(${ALT_VERSION//./ })
          echo "ALT_MAJOR=${altVersionArray[0]}" >>$GITHUB_OUTPUT
          echo "ALT_MINOR=${altVersionArray[1]}" >>$GITHUB_OUTPUT
        env:
          VERSION: ${{ inputs.version }}
          ALT_VERSION: ${{ inputs.alt-version }}

  container-build-n-push:
    needs: compose-container-tags
    if: ${{ needs.compose-container-tags.outputs.has-container-tags-enabled == 'true' }}
    uses: ./.github/workflows/container-build-n-push.yml
    with:
      checkout-ref: ${{ inputs.checkout-ref }}
      build-context-dir: ${{ inputs.dockerfile-dir }}
      container-image-name: ${{ inputs.container-image-name }}
      container-tags: ${{ needs.compose-container-tags.outputs.container-tags }}
      build-platforms: ${{ inputs.build-platforms }}
    secrets:
      dhub-username: ${{ secrets.dhub-username }}
      dhub-password: ${{ secrets.dhub-password }}
      ghcr-username: ${{ secrets.ghcr-username }}
      ghcr-password: ${{ secrets.ghcr-password }}

  get-docker-hub-repo-desc:
    needs: container-build-n-push
    if: ${{ inputs.dhub-readme-file != '' && github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    outputs:
      description: ${{ steps.package-json-desc.outputs.VALUE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.checkout-ref }}

      - name: Extract description from package.json
        id: package-json-desc
        run: echo "VALUE=$(cat package.json | jq '.description | select (.!=null)')"
        working-directory: ${{ inputs.working-dir }}

  update-docker-hub-repo-info:
    needs: get-docker-hub-repo-desc
    # underlying default readme-file value forbids us to test either readme-file
    # or short-desc: readme-file will always be set to README.md if empty.
    if: ${{ inputs.dhub-readme-file != '' }}
    uses: ./.github/workflows/util-update-docker-hub-repo-info.yml
    with:
      checkout-ref: ${{ inputs.checkout-ref }}
      readme-file: ${{ inputs.dhub-readme-file }}
      short-description: ${{ needs.get-docker-hub-repo-desc.outputs.description }}
    secrets:
      username: ${{ secrets.dhub-username }}
      password: ${{ secrets.dhub-password }}
      repository: ${{ secrets.dhub-username }}/${{ inputs.container-image-name }}
