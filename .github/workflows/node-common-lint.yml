name: Node.js common lint jobs

on:
  workflow_call:
    inputs:
      checkout-ref:
        description: The branch, tag or SHA to checkout. Defaults to the reference or SHA for that event.
        required: false
        type: string
      node-package-manager:
        description: "Node.js package manager to use: npm, yarn or pnpm"
        required: true
        type: string
      node-version:
        description: "Version Spec of the Node.js version to use (takes precedence over node-version-file). Examples: 12.x, 10.15.1, >=10.15.0."
        required: false
        type: string
      node-version-file:
        description: "File containing the version Spec of the version to use. Examples: package.json, .nvmrc, .node-version, .tool-versions."
        required: false
        type: string
        default: ".nvmrc"
      package-dir:
        description: "Directory within the repository where the package is located."
        required: false
        type: string

jobs:
  node-common-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.checkout-ref }}

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4
        with:
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.node-version-file }}

      - name: Install dependencies (NPM)
        if: ${{ inputs.node-package-manager == 'npm' }}
        run: npm ci
        working-directory: ${{ inputs.package-dir }}

      - name: Install dependencies (Yarn)
        if: ${{ inputs.node-package-manager == 'yarn' }}
        run: yarn install
        working-directory: ${{ inputs.package-dir }}

      - name: Install dependencies (PNPM)
        if: ${{ inputs.node-package-manager == 'pnpm' }}
        run: pnpm i
        working-directory: ${{ inputs.package-dir }}

      - name: Execute biome
        run: ${{ inputs.node-package-manager }} run biome:check
        working-directory: ${{ inputs.package-dir }}

      - name: Check Typescript typings
        if: ${{ hashFiles('tsconfig.json') != '' }}
        run: ${{ inputs.node-package-manager }} run tsc:check
        working-directory: ${{ inputs.package-dir }}
